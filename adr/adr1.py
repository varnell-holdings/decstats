import csv
from dataclasses import dataclass
from datetime import datetime
import re


@dataclass
class Ep:
    date: str = ""
    surname: str = ""
    mrn: str = ""
    dob: str = ""
    doc: str = ""
    procedure: str = ""
    ta: str = ""
    sa: str = ""
    tva: str = ""
    malig: str = ""


def parser(f):
    """Input a PHISCData text file
    Output a csv file
    See above dataclass for entries in csv
    See info_data.txt in this directory for an example of a split line from
    the PHISCData file
    The doc and mrn entries are not in the PHISCData file and are retrieved
    from episodes.csv using a key:value generated by doc_dict_maker
    """
    with open(f) as file, open("adr.csv", "w") as csvfile:
        writer = csv.writer(csvfile)
        headers = [
            "date",
            "surname",
            "mrn",
            "dob",
            "doc",
            "procedure",
            "ta",
            "sa",
            "tva",
            "malig" "",
        ]
        writer.writerow(headers)
        file.readline()
        for line in file.readlines():
            ep = Ep()
            entry = line.split()

            procedure_codes = entry[-2]
            if "32090" in procedure_codes or "32093" in procedure_codes:
                if "32090" in procedure_codes:
                    ep.procedure = "32090"
                elif "32093" in procedure_codes:
                    ep.procedure = "32093"

                ep.surname = entry[2].lower()

                # find the entry that is either 04 or starts with 04G
                # this is where the ICD codes start
                # Also dob is 2 entries before that
                # return -1 if not found
                index = next(
                    (
                        i
                        for i, item in enumerate(entry)
                        if (item == "04" or item[:3] == "04G")
                    ),
                    -1,
                )
                if index != -1:
                    ep.date = entry[index - 2][:8]

                    digits_only = re.sub(r"[^0-9]", "", entry[index - 3])
                    ep.dob = digits_only[4:12]

                    if ep.procedure == "32093":  # iterate through icd codes
                        i = index + 1
                        while True:
                            if entry[i] == "2":
                                break
                            elif entry[i] == "2M8211/0":
                                ep.ta = "ta"  # tubular adenoma
                                i += 1
                            elif entry[i] == "2M8213/0":
                                ep.sa = "sa"  # serrated adenoma
                                i += 1
                            elif entry[i] == "2M8263/0":
                                ep.tva = "tva"  # tubulovillous adenoma
                                i += 1
                            elif entry[i][:2] == "2M":
                                if not ep.malig:
                                    ep.malig = ep.malig + entry[i]
                                else:
                                    ep.malig = ep.malig + " " + entry[i]
                                i += 1
                            else:
                                i += 1

                    #  get the doctor and mrn from episodes.csv using dictionaries
                    key_for_doc = ep.date + ep.dob + ep.surname
                    second_key = ep.date + ep.dob
                    third_key = ep.date + ep.surname
                    try:
                        doctor = doc_dict[key_for_doc]
                    except KeyError:
                        try:
                            doctor = unknown_doc_dict_1[second_key]
                        except KeyError:
                            doctor = unknown_doc_dict_2.get(
                                third_key, ("unknown", "?", "?")
                            )
                    ep.doc = doctor[0]
                    ep.mrn = doctor[1]
                    if not ep.dob:
                        ep.dob = doctor[2]
                    try:
                        datetime.strptime(ep.dob, "%d%m%Y")
                    except ValueError as e:
                        ep.dob = doctor[2]
                        print(f"{e}")

                    line_list = []
                    line_list.append(ep.date)
                    line_list.append(ep.surname)
                    line_list.append(ep.mrn)
                    line_list.append(ep.dob)
                    line_list.append(ep.doc)
                    line_list.append(ep.procedure)
                    line_list.append(ep.ta)
                    line_list.append(ep.sa)
                    line_list.append(ep.tva)
                    line_list.append(ep.malig)

                print(line_list)
                writer.writerow(line_list)


def doc_dict_maker(month):
    """Make key:value pairs from episodes.csv
    Need multiple keys as some data in the PHISCData file is incorrect.
    The values are a tuple of (doctor, mrn)
    """
    doc_dict = dict()
    unknown_doc_dict_1 = dict()
    unknown_doc_dict_2 = dict()
    with open("episodes.csv", "r") as f:
        reader = csv.reader(f)
        next(reader)
        for entry in reader:
            if entry[0][4] == month:
                date = entry[0]
                date = date.replace("-", "")

                dob = entry[18]
                dob = dob.replace("/", "")
                if len(dob) == 7:
                    dob = "0" + dob
                name = entry[17].lower()
                key = date + dob + name
                second_key = date + dob
                third_key = date + name
                dob_for_csv = entry[18].replace("/", "")
                if len(dob_for_csv) == 7:
                    dob_for_csv = "0" + dob_for_csv
                doc = (entry[5].lower(), entry[1], dob_for_csv)
                doc_dict[key] = doc
                unknown_doc_dict_1[second_key] = doc
                unknown_doc_dict_2[third_key] = doc
    return doc_dict, unknown_doc_dict_1, unknown_doc_dict_2


if __name__ == "__main__":
    doc_dict, unknown_doc_dict_1, unknown_doc_dict_2 = doc_dict_maker("5")
    parser("PHISCData_May25.txt")
